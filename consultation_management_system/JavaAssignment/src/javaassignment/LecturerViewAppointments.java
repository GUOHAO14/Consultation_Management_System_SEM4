package javaassignment;

import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTextField;
import java.time.LocalDate;

/**
 *
 * @author Khoo Guo Hao
 */
public class LecturerViewAppointments extends FrameFormat {
    private String sessionUserID;
    private String [] columnName = {"Date", "Time Slot", "Student ID", "Student Name"};
    private DefaultTableModel model = new DefaultTableModel();
    private String selectedYear = "";
    private String viewType = "all";
    private Date selectedDate;
    private LocalDate currentDate = LocalDate.now();
    private LocalDate filterDate = LocalDate.now();
    private boolean filterSign;
    List<String[]> records = new ArrayList<>();
    
    /**
     * Creates new form ViewAppointments
     */
    public LecturerViewAppointments(String sessionUserID) {
        initComponents();
        this.sessionUserID = sessionUserID;
        model.setColumnIdentifiers(columnName);
        super.formatWindow("View Appointment Page");
        createTable("all");
        //if no date set, show all
//        loadAppointmentTable("all");
//        viewTypeStatus = "all";
//        chooseDateFilter();
    }
    
    public void createTable(String appointmentType) {
        LecturerInteractTextFile getTableRecords = new LecturerInteractTextFile();
        records = getTableRecords.readAppointments(sessionUserID, appointmentType);
        for (String[] record : records) {
            String [] newData = {record[3], record[4], record[1], record[2]};
            model.addRow(newData);
        }
    }
    
    public void createTable(String appointmentType, String filterStatus) {
        for (String[] record : records) {
            System.out.println(filterDate);
            String recordValue = record[3];
            String[] dateParts = recordValue.split("-");
            //removed "-" from dates
            int year = Integer.parseInt(dateParts[0]);
            int month = Integer.parseInt(dateParts[1]);
            int day = Integer.parseInt(dateParts[2]);
            LocalDate recordDate = LocalDate.of(year, month, day);
            if (recordDate.isEqual(filterDate)) {
                String [] newData = {record[3], record[4], record[1], record[2]};
                model.addRow(newData);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        dateChooser = new com.toedter.calendar.JDateChooser();
        title = new javax.swing.JLabel();
        dateFilter = new javax.swing.JButton();
        showAll = new javax.swing.JButton();
        viewUpcoming = new javax.swing.JButton();
        viewPast = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        resultType = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTable.setModel(model);
        jScrollPane1.setViewportView(mainTable);

        title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Appointments");

        dateFilter.setText("<html>Custom<br>Filter</html>");
        dateFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFilterActionPerformed(evt);
            }
        });

        showAll.setText("All");
        showAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllActionPerformed(evt);
            }
        });

        viewUpcoming.setText("Upcoming");
        viewUpcoming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewUpcomingActionPerformed(evt);
            }
        });

        viewPast.setText("Past");
        viewPast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPastActionPerformed(evt);
            }
        });

        resultType.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        resultType.setText("All Appointments");

        jButton2.setText("BACK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resultType, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(92, 92, 92))
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(showAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(viewUpcoming)
                        .addGap(47, 47, 47)
                        .addComponent(viewPast)
                        .addGap(177, 177, 177))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewUpcoming, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewPast, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showAll, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(resultType, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        JTextField dateField = ((JTextField) dateChooser.getDateEditor().getUiComponent());
        dateField.setEditable(false);
        dateField.setFocusable(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dateFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFilterActionPerformed
        // TODO add your handling code here:
        //gets date from JDateChooser to filter table result
        JTextField dateField = ((JTextField) dateChooser.getDateEditor().getUiComponent());
        if (dateField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Pick a date before clicking filter!", "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } else {
            model.setRowCount(0);
            // Directly update the filterDate here instead of relying on chooseDateFilter
            Date selectedDate = dateChooser.getDate();
            if (selectedDate != null) {
                Calendar c = new GregorianCalendar();
                c.setTime(selectedDate);

                // Combine selected date with current time
                filterDate = LocalDate.of(c.get(Calendar.YEAR), c.get(Calendar.MONTH) + 1, c.get(Calendar.DATE));
            }
            // Call createTable with filter applied
            createTable(viewType, "filtered");
        }
    }//GEN-LAST:event_dateFilterActionPerformed

    private void showAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllActionPerformed
        // TODO add your handling code here:
        selectedYear = "";
        JTextField dateField2 = ((JTextField) dateChooser.getDateEditor().getUiComponent());
        dateField2.setText("");
        model.setRowCount(0);
        viewType = "all";
        createTable(viewType);
        resultType.setText("All Appointments");
    }//GEN-LAST:event_showAllActionPerformed

    private void viewUpcomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewUpcomingActionPerformed
        // TODO add your handling code here:
        selectedYear = "";
        JTextField dateField2 = ((JTextField) dateChooser.getDateEditor().getUiComponent());
        dateField2.setText("");
        model.setRowCount(0);
        viewType = "upcoming";
        createTable(viewType);
        resultType.setText("Upcoming Appointments");
    }//GEN-LAST:event_viewUpcomingActionPerformed

    private void viewPastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPastActionPerformed
        // TODO add your handling code here:
        selectedYear = "";
        JTextField dateField2 = ((JTextField) dateChooser.getDateEditor().getUiComponent());
        dateField2.setText("");
        model.setRowCount(0);
        viewType = "past";
        createTable(viewType);
        resultType.setText("Past Appointments");
    }//GEN-LAST:event_viewPastActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new LecturerHomePage(sessionUserID).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LecturerViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LecturerViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LecturerViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LecturerViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LecturerViewAppointments("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JButton dateFilter;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable mainTable;
    private javax.swing.JLabel resultType;
    private javax.swing.JButton showAll;
    private javax.swing.JLabel title;
    private javax.swing.JButton viewPast;
    private javax.swing.JButton viewUpcoming;
    // End of variables declaration//GEN-END:variables
}
